import sys  # Импортируем модуль sys для работы с вводом/выводом

# Считываем первую строку ввода: n (количество стойл) и k (количество коров)
n, k = [int(x) for x in sys.stdin.readline().split()]

# Считываем вторую строку ввода: координаты стойл (уже отсортированы по условию задачи)
stoila = [int(x) for x in sys.stdin.readline().split()]

# Функция для проверки, можно ли расставить k коров с минимальным расстоянием mid
def check_cows(stoila, k, mid):
    # Позиция последней поставленной коровы (начинаем с первого стойла)
    last_cow_position = stoila[0]
    # Количество уже поставленных коров (начальное значение — 1, так как первую корову уже поставили)
    placed_cow = 1

    # Проходим по всем стойлам, начиная со второго
    for i in range(1, n):
        # Если расстояние от последней коровы до текущего стойла >= mid,
        # то можно поставить корову в это стойло
        if stoila[i] - last_cow_position >= mid:
            # Обновляем позицию последней коровы
            last_cow_position = stoila[i]
            # Увеличиваем количество поставленных коров
            placed_cow += 1

            # Если удалось поставить всех k коров, возвращаем True
            if placed_cow == k:
                return True

    # Если не удалось поставить всех k коров, возвращаем False
    return False

# Функция для выполнения бинарного поиска по ответу
def binary_check(stoila):
    # Левая граница бинарного поиска (минимальное возможное расстояние)
    left = 0
    # Правая граница бинарного поиска (максимальное возможное расстояние)
    right = stoila[-1] - stoila[0]

    # Бинарный поиск: продолжаем, пока левая граница не превысит правую
    while left <= right:
        # Вычисляем середину диапазона (текущее расстояние для проверки)
        mid = (left + right) // 2

        # Проверяем, можно ли расставить k коров с расстоянием mid
        if check_cows(stoila, k, mid) == True:
            # Если можно, пробуем увеличить расстояние (сдвигаем левую границу)
            left = mid + 1
        else:
            # Если нельзя, уменьшаем расстояние (сдвигаем правую границу)
            right = mid - 1

    # По завершении бинарного поиска right содержит максимальное допустимое расстояние
    return right

# Выводим результат работы функции binary_check
print(binary_check(stoila))