import sys  # Импортируем модуль sys для работы с вводом/выводом

# Считываем входные данные: n (размер массива) и k (количество отрезков)
n, k = [int(x) for x in sys.stdin.readline().split()]

# Считываем массив mass (элементы массива)
mass = [int(x) for x in sys.stdin.readline().split()]

# Функция для проверки, можно ли разбить массив на k отрезков с суммой не более mid
def greedy_alg(mass, k, mid):
    count = 0  # Счётчик отрезков
    summ = 0   # Текущая сумма на отрезке

    # Проходим по всем элементам массива
    for i in range(n):
        # Если добавление текущего элемента превышает mid
        if (summ + mass[i]) > mid:
            count += 1  # Начинаем новый отрезок
            summ = mass[i]  # Сбрасываем сумму и начинаем новый отрезок с текущего элемента
        else:
            summ += mass[i]  # Продолжаем текущий отрезок

    # Учитываем последний отрезок, если он не был учтён
    if summ > 0:
        count += 1

    # Если количество отрезков не превышает k, возвращаем True
    if count <= k:
        return True
    else:
        return False

# Функция для выполнения бинарного поиска по ответу
def binary_search(mass):
    # Левая граница бинарного поиска (минимальная возможная сумма на отрезке)
    left = max(mass)  # Максимальный элемент массива
    # Правая граница бинарного поиска (максимальная возможная сумма на отрезке)
    right = sum(mass)  # Сумма всех элементов массива

    # Бинарный поиск: продолжаем, пока левая граница не превысит правую
    while left <= right:
        # Вычисляем середину диапазона (текущее значение mid)
        mid = (left + right) // 2

        # Проверяем, можно ли разбить массив на k отрезков с суммой не более mid
        if greedy_alg(mass, k, mid) == True:
            # Если можно, пробуем уменьшить сумму (сдвигаем правую границу)
            right = mid - 1
        else:
            # Если нельзя, увеличиваем сумму (сдвигаем левую границу)
            left = mid + 1

    # По завершении бинарного поиска left содержит минимальную максимальную сумму
    return left

# Выводим результат работы функции binary_search
print(binary_search(mass))