import sys

# Ввод строки s
s = input()
# Вычисление длины строки s
n = len(s)
# Ввод количества запросов m
m = int(input())
# Параметры для хэширования: k - основание хэша, MOD - модуль для предотвращения переполнения
k = 31
MOD = 10**18

# Список для хранения запросов
requests = []
# Чтение m запросов и добавление их в список requests
for _ in range(m):
    requests.append(list(map(int, input().split())))

# Создание словаря для сопоставления каждой буквы латинского алфавита её порядковому номеру
alfavit = {chr(i): i - ord('a') + 1 for i in range(ord('a'), ord('z') + 1)}

# Инициализация массивов для префиксных сумм и степеней k
pref_summi = [0] * (n + 1)  # Префиксные суммы хэшей
power = [1] * (n + 1)  # Степени k для корректировки хэшей

# Заполнение массивов power и pref_summi
for i in range(n):
    bukva = s[i]  # Текущий символ строки
    index_i = alfavit[bukva]  # Порядковый номер символа в алфавите
    power[i + 1] = (power[i] * k) % MOD  # Вычисление следующей степени k с учётом модуля
    pref_summi[i + 1] = (pref_summi[i] + index_i * power[i]) % MOD  # Обновление префиксной суммы хэшей

# Обработка запросов
for request in requests:
    # Преобразование индексов из 1-индексации в 0-индексацию
    a = request[0] - 1  # Начало первой подстроки
    b = request[1]  # Конец первой подстроки (без вычитания 1, так как префиксные суммы включают правую границу)
    c = request[2] - 1  # Начало второй подстроки
    d = request[3]  # Конец второй подстроки (без вычитания 1)

    # Проверка, равны ли длины подстрок
    if (b - a) != (d - c):
        print("No")  # Если длины разные, подстроки не могут быть равны
        continue

    # Вычисление разницы в позициях подстрок
    if a <= c:
        difference = c - a  # Разница в позициях, если первая подстрока начинается раньше
        first_hash = ((pref_summi[b] - pref_summi[a]) * power[difference]) % MOD  # Хэш первой подстроки с учётом разницы
        second_hash = (pref_summi[d] - pref_summi[c]) % MOD  # Хэш второй подстроки
    else:
        difference = a - c  # Разница в позициях, если вторая подстрока начинается раньше
        first_hash = (pref_summi[b] - pref_summi[a]) % MOD  # Хэш первой подстроки
        second_hash = ((pref_summi[d] - pref_summi[c]) * power[difference]) % MOD  # Хэш второй подстроки с учётом разницы

    # Сравнение хэшей и вывод результата
    if first_hash == second_hash:
        print('Yes')  # Подстроки равны
    else:
        print('No')  # Подстроки не равны